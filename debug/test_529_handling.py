#!/usr/bin/env python3
"""Test 529 error handling improvements"""

import sys
import os
import time
from unittest.mock import Mock, patch

# Add project to path
sys.path.insert(0, '/home/viblio/coding_projects/music_league')
os.chdir('/home/viblio/coding_projects/music_league')

from src.music_league.cached_llm_client import CachedAnthropicClient
from anthropic import APIStatusError

print("=" * 80)
print("TESTING 529 ERROR HANDLING")
print("=" * 80)

print("\nüìã NEW ERROR HANDLING FEATURES:")
print("1. Exponential backoff for 529 errors (30s, 60s, 120s...)")
print("2. Random jitter to avoid thundering herd")
print("3. Maximum wait time cap (5 minutes)")
print("4. Graceful exit after 3 retries")
print("5. User-friendly messaging")
print()

# Test the retry logic
print("üß™ SIMULATING 529 ERROR SCENARIO")
print("-" * 40)

# Create a mock that simulates 529 errors
mock_response = Mock()
error_529 = APIStatusError(
    message="Overloaded",
    response=Mock(status_code=529),
    body={'type': 'error', 'error': {'type': 'overloaded_error', 'message': 'Overloaded'}}
)

print("\nüìä RETRY TIMING CALCULATION:")
print("(Base wait: 30s, Max wait: 300s)")
print()

base_wait = 30
max_wait = 300

for retry in range(4):
    wait_time = min(base_wait * (2 ** retry), max_wait)
    print(f"Retry {retry + 1}: Wait ~{wait_time} seconds (plus 0-10s jitter)")

print("\nTotal maximum wait time: ~", sum(min(base_wait * (2 ** r), max_wait) for r in range(3)), "seconds")

print("\n" + "=" * 80)
print("IMPROVED USER EXPERIENCE")
print("=" * 80)

print("""
OLD BEHAVIOR (sub-second retries):
------------------------------------
‚ùå Retry in 0.465 seconds...
‚ùå Retry in 0.989 seconds...
‚ùå Failed with cryptic error

Problems:
- Wastes API quota on doomed requests
- No useful feedback to user
- Continues hammering overloaded service

NEW BEHAVIOR (smart backoff):
------------------------------------
‚ö†Ô∏è  API overloaded (529). Waiting 30.5 seconds before retry 1/3
‚ö†Ô∏è  API overloaded (529). Waiting 62.3 seconds before retry 2/3
‚ö†Ô∏è  API overloaded (529). Waiting 124.7 seconds before retry 3/3
üö® Anthropic API is overloaded. Service experiencing high load.
üí° Please try again later or during off-peak hours.
üö´ Exiting due to persistent API overload.

Benefits:
‚úÖ Respects service capacity with proper backoff
‚úÖ Clear communication about what's happening
‚úÖ Actionable advice for users
‚úÖ Graceful exit instead of endless retries
‚úÖ Reduces load on overloaded service
""")

print("=" * 80)
print("RECOMMENDATIONS")
print("=" * 80)

print("""
When you encounter 529 errors:

1. **Wait and Retry**: The system will automatically wait and retry 3 times
2. **Off-Peak Hours**: Try running early morning or late night
3. **Reduce Load**: Use smaller --number values to make fewer API calls
4. **Use Cache**: Previous responses are cached and won't need API calls
5. **Batch Runs**: Don't run multiple scouts simultaneously

The improved error handling ensures:
- You don't waste API credits on failed requests
- The service isn't overwhelmed by rapid retries
- You get clear feedback about what's happening
- The system exits gracefully when the API is truly unavailable
""")